import pandas as pd
import matplotlib as mpl
from matplotlib import pyplot as plt
import random as random
import xlsxwriter as xlsx

#________________________________________________________________________________________
# Name: George Shea     ßeta
# Date Created: 9/9/21
# Date Modified 17/9/21
# project part 2 this project is parsing through an excel spreadsheet to produce usable data
# Version 1.4
#________________________________________________________________________________________

# Path In
path = pd.ExcelFile('C:/Users/gshea/Desktop/School/Summer2021/Artifical/DataSets/project_1_part_2.xlsx')
dataFramePrime = pd.read_excel(path)                        #Allows for sheet reading


#Path out
writer = pd.ExcelWriter('C:/Users/gshea/Desktop/School/Summer2021/Artifical/DataSets/outputData.xlsx')
file = xlsx.Workbook('C:/Users/gshea/Desktop/School/Summer2021/Artifical/DataSets/outputData.xlsx')


#Replaces any answer in the negative with nan
counter = 0
for x in dataFramePrime:
    dataFramePrime.iloc[:, counter] = dataFramePrime.iloc[:, counter].replace({"Nope" : None }, regex=True).replace({"No" : None}, regex=True).replace({"Nan" : None}, regex=True).replace({"لا" : None}, regex=True)
    counter = counter + 1

#Used Lists
ipList = dataFramePrime['User IP'].values.tolist()                           # Gets ip for the people
launageList = dataFramePrime['What Language Do You Speak?'].values.tolist()  # Get langs for the people
spamMe = dataFramePrime['Would you like to learn more?'].values.tolist()     # The please spam me button


potato = []
# Graphs out for problem A and B
def DualSearch(probA = None, probB = None):
    print()

    #Prints Out Vegis Count
    if(probA == True):
        dualOutput = dataFramePrime.iloc[:, 1:33].notnull().sum(axis=0)
        dualOutput = dualOutput.sort_values(ascending=True)
        dualOutput = dualOutput.to_frame()

        test = dualOutput.plot.bar(legend=None)
        plt.title("Problem A")
        plt.xlabel("Crops")

    #Prints Out Launages Count
    elif(probB == True):
        plt.title("Problem B")
        plt.xlabel("Languages")
        dualOutput = dataFramePrime['What Language Do You Speak?'].replace("日本語", "Japanese").replace("中文", "Chinese") .value_counts()
        test = dualOutput.plot.bar(legend=None)
    print("________________________________________________")

    # Makes Bar Graph pretty
    plt.ylabel("Number Of People")
    bars = [rect for rect in test.get_children() if isinstance(rect, mpl.patches.Rectangle)]
    counter = 0
    #Assigns random colors to graph
    for x in bars:
        color = (random.random(), random.random(), random.random())
        bars[counter].set_color(color)
        counter = counter + 1
    bars[(len(bars) - 1)].set_color('white')

    plt.xticks( rotation='vertical')
    plt.show()

    return dualOutput


# Sorts Data ands prints it out
def UniversalSort(searchList, printerTru = None):
    uniqueSearch = []
    counter = 0
    sheetOne = []
    sheetTwo = []
    sheetThree = []
    sheetFour = []
    sheetFive = []

    # Creates List of unique items
    for x in searchList:
        tag = searchList[counter]
        # Check for if there is a new item
        if (not (str(tag) in uniqueSearch)):
            uniqueSearch.append(str(tag))
        counter = counter + 1

    dfStorage = []
    # Each list within organized holder is a unique value based on organzaiton cretiria
    counter = 0
    counterTwo = 0
    for x in uniqueSearch:
        dfTemp = pd.DataFrame(columns = dataFramePrime.columns.values.tolist())
        counter = 0
        for y in searchList:
            # Goes Through and assigns each item to its corsponding list
            if(searchList[counter] == uniqueSearch[counterTwo]):
                #Magic Syntax https://www.geeksforgeeks.org/how-to-add-one-row-in-an-existing-pandas-dataframe/
                dfTemp.loc[len(dfTemp.index)] = dataFramePrime.iloc[counter]
            # Goes Through entire dataset
            counter = counter + 1

        # Goes Through each list
        counterTwo = counterTwo + 1

        dfStorage.append(dfTemp)
        sheetOne.append(dfTemp)
    # Sends organzied things to excel
    def Printer():
        counter = 0
        print("________________________________________________________________________________________________________________________________________________________________________________________________")
        for x in dfStorage:
            # Prints out total survays for the area and how many launages are spoken by search
            print(uniqueSearch[counter], " Unique Votes: ", len(dfStorage[counter]))

            # used to get precents
            totalLen = len(dfStorage[counter])

            # Gets vegi votes and vegi vote precentage
            output = dfStorage[counter].iloc[:, 1:33].notnull().sum(axis=0)
            percent = ((dfStorage[counter].iloc[:, 1:33].notnull().sum(axis=0)) / totalLen) * 100
            potato.append(percent)
            sheetFour.append(output)
            sheetFive.append(percent)
            # Sorts them in decsending order
            percent = percent.sort_values(ascending=False)
            output = output.sort_values(ascending=False)
            #percent = round(percent)    # Rounds to get rid of end bit
            tempDataFrame = pd.concat([output, round(percent)], axis=1)

            # Renames coloumns to be logical
            tempDataFrame.columns = ("Votes", "Precents")
            # Writes to excel file

            #Please Spam me data
            banna = dfStorage[counter].iloc[:, [0, 34, 35, 36, 43]].loc[dfStorage[counter]['Would you like to learn more?'].notnull()]
            sheetThree.append(banna)

            counter = counter + 1

    if (printerTru == True):
        Printer()
    return sheetOne, sheetThree, sheetFour, sheetFive, uniqueSearch


def main():
    fo = DualSearch(probA=True)
    bar = DualSearch(probB=True)

    sheetOneOutput, sheetThreeOutput, sheetFourOutput, sheetFiveOutput, searchListOutput = UniversalSort(ipList, printerTru=True)
    def Sheet5And6():
        sheetFive = pd.DataFrame()
        counter = 0

        # sheet 5
        for x in sheetFiveOutput:
            sheetFiveOutput[counter] = sheetFiveOutput[counter].round(2)
            tempsheet = pd.DataFrame()
            tempsheet2 = pd.DataFrame()
            tempsheet["CROPS"] = sheetFiveOutput[counter].index
            tempsheet2[searchListOutput[counter]] = sheetFiveOutput[counter].array
            sheetFive = pd.concat([sheetFive, tempsheet], axis=1)
            sheetFive = pd.concat([sheetFive, tempsheet2], axis=1)
            counter = counter + 1

        sheetName = random.randrange(1,100)
        sheetFive.to_excel(writer, str(sheetName))


        sheetSix = pd.DataFrame()
        counter = 0

        # sheet 6
        for x in sheetFiveOutput:
            sheetFiveOutput[counter] = sheetFiveOutput[counter].sort_values(ascending=False)
            sheetFiveOutput[counter] = sheetFiveOutput[counter].round(2)
            tempsheet = pd.DataFrame()
            tempsheet2 = pd.DataFrame()
            tempsheet["CROPS"] = sheetFiveOutput[counter].index
            tempsheet2[searchListOutput[counter]] = sheetFiveOutput[counter].array
            sheetSix = pd.concat([sheetSix, tempsheet], axis=1)
            sheetSix = pd.concat([sheetSix, tempsheet2], axis=1)
            counter = counter + 1

        sheetName = random.randrange(1,100)
        sheetSix.to_excel(writer, str(sheetName))

    Sheet5And6()

    sheetOneOutput, sheetThreeOutput, sheetFourOutput, sheetFiveOutput, searchListOutput = UniversalSort(launageList, printerTru=True)
    Sheet5And6()

    print("\n\n\n\n")
    writer.save()
main()


