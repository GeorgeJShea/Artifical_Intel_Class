import pandas as pd
from matplotlib import pyplot as plt
import random as random

#________________________________________________________________________________________
# Name: George Shea     ÃŸeta
# Date Created: 7/9/21
# Date Modified 8/9/21
# project part 1 this project is parsing through an excel spreadsheet to produce usable data
# Version 3.0
#
#
#________________________________________________________________________________________


# cant declare publicly just using 1 == 1 to keep clean
if( 1 == 1):
    #Be sure to update your path on your own computer
    #path = 'C:/Users/gshea/Desktop/School/Summer2021/Artifical/DataSets/project_1_part_1.xlsx'
    path = pd.ExcelFile('C:/Users/gshea/Desktop/School/Summer2021/Artifical/DataSets/project_1_part_1.xlsx')


    dataFramePrime = pd.read_excel(path)
    dataFramePrimeSheetTwo = pd.read_excel(path, 'Sheet 2')
    class Customer:
        print(end="")

    productsNames = dataFramePrime['Product'].values.tolist()                           # Contains product names such as vegis
    qauntities = dataFramePrime['Order Quantity'].values.tolist()                       # Contains how much it was sold for
    lotNames = dataFramePrime['Lot code 1'].values.tolist()                             # Contains Lots E, e d etc
    persons = dataFramePrime['Customer'].values.tolist()                                # Companies who bought said item

    datesDistributed  = dataFramePrime['Order ID'].values.tolist()                      # G01012014 Format changed
    datesHarvested = pd.to_datetime(dataFramePrime['Harvest Date'].values).tolist()     # yy/mm/dd pandas format changed
    cashAmount = dataFramePrime['Total Cost'].values.tolist()                           #Cost of shipment
    servings = dataFramePrimeSheetTwo['Servings per Unit'].values.tolist()               # Serving amount per poud of and item
    servingVegi = dataFramePrimeSheetTwo['Crop Name'].values.tolist()                   # Corsisponding vegi to serving

    servingCombined = []
    combined = []                                                                       # Combinds products names and what they sold for #

    # Organizes Lists
    counter = 0
    for x in productsNames:
        # Sets Distrbute date to dd/mm/yyyy
        datesDistributed[counter] = datesDistributed[counter][1: 9]
        days = datesDistributed[counter][0:2]
        months = datesDistributed[counter][2: 4]
        years = datesDistributed[counter][4: 10]
        datesDistributed[counter] = years + "/" + months + "/" + days

        # Sets Harvest date to dd/mm/yyyy
        datesHarvested[counter] = str(datesHarvested[counter])[0: 10]
        datesHarvested[counter] = str(datesHarvested[counter]).replace("-", "/")
        datesHarvested[counter] = datesHarvested[counter].split("/", 2)[0] + "/" + datesHarvested[counter].split("/", 2)[1] + "/" + datesHarvested[counter].split("/", 2)[2]

        combined.append(productsNames[counter].replace(",", "").replace(" ", "_") + "# " + str(qauntities[counter]))

        counter = counter + 1

    counter = 0
    for x in servings:
        servingVegi[counter] = servingVegi[counter].replace(",", "").replace(" ", "_")
        servingCombined.append(servingVegi[counter].replace(",", "").replace(" ", "_") + "# " + str(servings[counter]))
        counter = counter + 1

    produceList = []

    #Adds all unigue vegis to object
    counter = 0
    while counter < len(qauntities):
        tag = productsNames[counter].replace(",", "").replace(" ", "_")
        # Check for if there is a new vegi
        if(not(str(tag) in produceList)):
            produceList.append(str(tag))
        counter = counter + 1

    # Assigns Zero To all attributes
    counter = 0
    for x in produceList:
        customerA = Customer()
        setattr(Customer, produceList[counter], 0.0)
        counter = counter + 1


def Quad(search, graphName, barGraph = None, plotGraph = None):
    things = []

    counter = 0
    while counter < len(search):
        tag = str(search[counter]).replace(",", "").replace(" ", "_")
        # Check for a new unique items(from vegis to people) and add them to things list
        if (not (str(tag) in things)):
            things.append(str(tag))
        counter = counter + 1


    # Creates copy of things to put objects in
    counter = 0
    thingsObject = things.copy()
    for x in things:
        thingsObject[counter] = Customer()
        counter = counter + 1


    # this thing works as intended
    # For the amount of things(persons/vegi/etc) it will use search to varify if criteria is meet and assign amounts to it
    counter = 0
    for x in things:
        # First item
        counterTwo = 0

        #print(" __________________________________________")
        for item in search:
            # Checks if matchs question criteria
            if (things[counter] == search[counterTwo]):
                # If it matches it will assign amounts to the object
                tempValue = getattr(thingsObject[counter], combined[counterTwo].split("#", 1)[0])
                setattr(thingsObject[counter], combined[counterTwo].split("#", 1)[0], float(tempValue) + float(combined[counterTwo].split("#", 1)[1]))

                # testing code
                #print(things[counter], " : ", combined[counterTwo].split("#", 1)[0], "  : ", getattr(thingsObject[counter], combined[counterTwo].split("#", 1)[0]))

            # counts up for each atribute
            counterTwo = counterTwo + 1
        #Once it goes through all atributes it goes to the next item and resets
        counter = counter + 1

    # Update Tomorow so it actuall works

    # this is making graphs but distorting data
    # Will create line graphs
    def LineGraphIt():
        counter = 0
        counterTwo = 0
        testList = []
        for y in things:
            counter = 0
            for x in thingsObject:
                testList.append(getattr(thingsObject[counter], combined[counterTwo].split("#", 1)[0]))
                #print("Amount: ", getattr(thingsObject[counter], combined[0].split("#", 1)[0]), "  Index: ", counter, " Date: ", things[counter])
                counter = counter + 1

                # makes the diffrent lines more distinct

            r = random.random()
            b = random.random()
            g = random.random()
            color = (r, g, b)
            # if 3 or something if to bar instead plt->bar
            if(barGraph == True):
                plt.bar(things, testList, linestyle='solid', label=str(productsNames[counterTwo]))
            if(plotGraph == True):
                plt.plot(things, testList, c=color, marker='o', linestyle='solid', label=str(productsNames[counterTwo]))
            counterTwo = counterTwo + 1
            testList = []

        plt.title(graphName)
        plt.legend(loc=0, prop={'size': 5})
        plt.ylabel("Amount: Pounds")
        plt.xticks(rotation='vertical')
        plt.xlabel("Day")
        plt.show()

    if (barGraph == True or plotGraph == True):
        LineGraphIt()

def Total():
    counter = 0
    runningTotal = 0.0
    for x in cashAmount:

        runningTotal = float(str(cashAmount[counter]).replace('`', "0").replace("nan", "0")) + runningTotal
        counter = counter + 1

    print("Total Amount Sold: ", round(runningTotal, 2))

def Servings():
    counter = 0
    servingTotal = 0.0
    for x in combined:
        servingTotal = servingTotal + (float(combined[counter].split("#", 1)[1]) * float(servings[servingVegi.index(combined[counter].split("#", 1)[0])]))
        counter = counter + 1

    print(round(servingTotal))

def Display():
    print("Project 1 Data")
    print("____________________________________")
    # A
    print("Total For Each Crop")
    print("Expect lag...")
    Quad(produceList, "Crop Total", barGraph=True)
    print()

    print("Serving Lot Distrubation")
    Quad(lotNames, "Lot Totals", plotGraph=True)
    print()

    # C D mode on
    #  Person Purchases
    print("Organization Purchases")
    Quad(persons, "Organization Totals", plotGraph=True)
    print()

    # E Graph Of Distribuation Dates
    print("Shipping Distribution Data")
    Quad(datesDistributed, "Distribution Graph", plotGraph=True)
    print()

    # F Graph Of Harvest Dates
    print("Harvest Crops Data")
    Quad(datesHarvested, "Harvest Graph", plotGraph=True)
    print()

    # G
    print()
    print("Total Sales")
    Total()
    print("Total Servings ")
    Servings()
    print()

def main():
    Display()

main()